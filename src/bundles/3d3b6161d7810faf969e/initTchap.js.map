{"version":3,"file":"bundles/3d3b6161d7810faf969e/initTchap.js","mappings":"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","sources":["webpack://element-web/./src/tchap/util/TchapVersionManagement.ts","webpack://element-web/./src/tchap/util/TchapUserSettings.ts","webpack://element-web/./src/tchap/components/views/dialogs/ExpiredAccountDialog.tsx","webpack://element-web/./src/tchap/lib/ExpiredAccountHandler.ts","webpack://element-web/./src/tchap/app/initTchap.ts"],"sourcesContent":["import BasePlatform from \"~tchap-web/src/BasePlatform\";\nimport { MatrixClientPeg } from \"~tchap-web/src/MatrixClientPeg\";\nimport PlatformPeg from \"~tchap-web/src/PlatformPeg\";\n\nexport default class TchapVersionManagement {\n    static SYNC_STORE_NAME = \"matrix-js-sdk:riot-web-sync\";\n\n    /**\n     * replicate the behaviour of the button Clear Cache and Reload, and clear browser cache on firefox\n     * https://github.com/matrix-org/~tchap-web/blob/3c5c2bef6dbac51ce6e1864056523815ca4c38d9/src/components/views/settings/tabs/user/HelpUserSettingsTab.tsx#L308\n     * @returns nothing\n     */\n    public static clearCacheAndReload(): void {\n        console.log(\":TCHAP: clearCacheAndReload\");\n\n        if (!PlatformPeg.get()) return;\n\n        MatrixClientPeg.get().stopClient();\n        MatrixClientPeg.get()\n            .store.deleteAllData()\n            .then(() => {\n                // The bool parameter of reload() works only in firefox, but most of our users use firefox.\n                // @ts-expect-error: reload has no official parameter\n                window.location.reload(true);\n            });\n    }\n\n    /**\n     * Retrieve the version of the store\n     * inspired of https://github.com/matrix-org/matrix-js-sdk/blob/aa5a34948aac9795c4fe4d3c8f6c6ead04b58b61/src/indexeddb-helpers.ts#L25\n     * @param indexedDB indexedDB object\n     * @param dbName name of the store\n     * @returns Promise of a version\n     */\n    public static getStoreVersion(indexedDB: IDBFactory, dbName: string): Promise<number> {\n        return new Promise<number>((resolve, reject) => {\n            let exists = true;\n            const req = indexedDB.open(dbName);\n            req.onupgradeneeded = () => {\n                // Since we did not provide an explicit version when opening, this event\n                // should only fire if the DB did not exist before at any version.\n                exists = false;\n            };\n            req.onblocked = () => reject(req.error);\n            req.onsuccess = () => {\n                const db = req.result;\n                const version: number = db.version;\n                db.close();\n                if (!exists) {\n                    // The DB did not exist before, but has been created as part of this\n                    // existence check. Delete it now to restore previous state. Delete can\n                    // actually take a while to complete in some browsers, so don't wait for\n                    // it. This won't block future open calls that a store might issue next to\n                    // properly set up the DB.\n                    indexedDB.deleteDatabase(dbName);\n                    reject(\"db did not exists\");\n                }\n                resolve(version);\n            };\n            req.onerror = (ev) => reject(req.error);\n        });\n    }\n\n    static VERSION_APP_KEY = \"tchap_app_version\";\n\n    /**\n     * Save app version in local storage\n     * ie : tchap_app_version = 4.0.5_1.11.10 (no \"v\" in front !)\n     * @param platform initiated platform\n     */\n    public static async saveAppVersion(platform: BasePlatform) {\n        const localStorage = window.localStorage;\n        if (localStorage) {\n            const version: string = await platform.getAppVersion();\n            localStorage.setItem(TchapVersionManagement.VERSION_APP_KEY, version);\n        }\n    }\n\n    /**\n     * returns app version stored in local storage\n     * @returns string, app version in semver form : 4.0.5_1.11.10. Null if not found.\n     */\n    public static getAppVersion(): string {\n        const localStorage = window.localStorage;\n        if (localStorage) {\n            return localStorage && localStorage.getItem(TchapVersionManagement.VERSION_APP_KEY);\n        } else {\n            return null;\n        }\n    }\n}\n","\nexport default class TchapUserSettings {\n    /**\n     * \n     * Override User Settings\n     */\n    public static override() {\n\n        //override user settings here if needed\n    }\n}\n","/* eslint-disable max-len */\nimport React from \"react\";\nimport { _t } from \"~tchap-web/src/languageHandler\";\nimport BaseDialog from \"~tchap-web/src/components/views/dialogs/BaseDialog\";\nimport DialogButtons from \"~tchap-web/src/components/views/elements/DialogButtons\";\nimport InlineSpinner from \"~tchap-web/src/components/views/elements/InlineSpinner\";\n\nimport TchapUtils from \"../../../util/TchapUtils\";\n\ninterface IProps {\n    onFinished(): void;\n    onRequestNewEmail(): Promise<any>;\n    emailDelaySecs?: number; //delay between 2 emails in seconds, by default 30\n}\n\ninterface IState {\n    emailDelaySecs: number; //delay betwenn 2 emails in seconds, by default 30\n    newEmailSentTimestamp: number; //timestamp\n    ProcessState: ProcessState;\n}\n\nenum ProcessState {\n    START,\n    SENDING_EMAIL,\n    EMAIL_MUST_WAIT,\n    EMAIL_SUCCESS,\n    EMAIL_FAILURE,\n    ACCOUNT_STILL_EXPIRED,\n    ACCOUNT_RENEWED,\n}\n/**\n * ExpiredAccountDialog is displayed when the user account is expired. It can not be canceled until the account is renewed.\n * This panel is exclusively opened by the listener ExpiredAccountHandler\n* This component is required when activating the plugin synapse-email-account-validity on the server side:  https://github.com/matrix-org/synapse-email-account-validity\n */\nexport default class ExpiredAccountDialog extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            newEmailSentTimestamp: 0,\n            emailDelaySecs: this.props.emailDelaySecs || 30,\n            ProcessState: ProcessState.START,\n        };\n    }\n\n    //check if an email can be sent of must wait a bit\n    private mustWait() {\n        return (\n            this.state.newEmailSentTimestamp != 0 &&\n            Date.now() - this.state.newEmailSentTimestamp < this.state.emailDelaySecs * 1000\n        );\n    }\n\n    private onOk = async () => {\n        if (this.state.ProcessState === ProcessState.ACCOUNT_RENEWED) {\n            return this.props.onFinished();\n        }\n\n        //check that the account is still expired\n        if (await TchapUtils.isAccountExpired()) {\n            this.setState({\n                ProcessState: ProcessState.ACCOUNT_STILL_EXPIRED,\n            });\n        } else {\n            this.setState({\n                ProcessState: ProcessState.ACCOUNT_RENEWED,\n            });\n        }\n    };\n\n    private onRequestEmail = () => {\n        //check if user must wait before sending a new email\n        if (this.mustWait()) {\n            return this.setState({\n                ProcessState: ProcessState.EMAIL_MUST_WAIT,\n            });\n        }\n\n        //send the new email requested\n        this.setState({\n            ProcessState: ProcessState.SENDING_EMAIL,\n        })\n        this.props.onRequestNewEmail().then((success) => {\n            this.setState({\n                newEmailSentTimestamp: success ? Date.now() : this.state.newEmailSentTimestamp,\n                ProcessState: success ? ProcessState.EMAIL_SUCCESS : ProcessState.EMAIL_FAILURE,\n            });\n        });\n    };\n\n    render() {\n        let titleMessage = _t(\"The validity period of your account has expired\");\n        let descriptionMessage = (\n            <p>{_t(\"An email has been sent to you. Click on the link it contains, click below.\")}</p>\n        );\n        let alertMessage = null;\n        let requestNewEmailButton = <button onClick={this.onRequestEmail} data-testid=\"dialog-send-email-button\">{_t(\"Request a renewal email\")}</button>;\n        let okButtonText = _t(\"I renewed the validity of my account\");\n\n        switch (this.state.ProcessState) {\n            case ProcessState.SENDING_EMAIL:\n                alertMessage = <InlineSpinner />\n                break;\n            case ProcessState.EMAIL_MUST_WAIT:\n                //don't know which class should decorate this message, it is not really an error\n                //its goal is to avoid users to click twice or more on the button and spam themselves\n                alertMessage = (\n                    <p className=\"\" data-testid=\"dialog-email-wait-message\">\n                        {_t(\"Wait for at least %(wait)s seconds between two emails\", { wait: this.state.emailDelaySecs })}\n                    </p>\n                );\n                break;\n            case ProcessState.EMAIL_FAILURE:\n                alertMessage = (\n                    <p className=\"text-error\" data-testid=\"dialog-email-failure-message\">{_t(\"The email was not sent sucessfully, please retry in a moment\")}</p>\n                );\n                break;\n            case ProcessState.EMAIL_SUCCESS:\n                alertMessage = <p className=\"text-success\" data-testid=\"dialog-email-sent-message\">{_t(\"A new email has been sent\")}</p>;\n                break;\n            case ProcessState.ACCOUNT_STILL_EXPIRED:\n                alertMessage = (\n                    <p className=\"text-error\" data-testid=\"dialog-account-still-expired-message\">\n                        {_t(\n                            \"Your account is still expired, please follow the link in the email you have received to renew it\",\n                        )}\n                    </p>\n                );\n                break;\n            case ProcessState.ACCOUNT_RENEWED:\n                titleMessage = _t(\"Congratulations, your account has been renewed\");\n                descriptionMessage = <p>{_t(\"You can refresh the page to continue your conversations\")}</p>;\n                okButtonText = _t(\"Reload page\");\n                alertMessage = null;\n                requestNewEmailButton = null;\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <BaseDialog\n                className=\"mx_QuestionDialog\"\n                onFinished={this.props.onFinished}\n                title={titleMessage}\n                contentId=\"mx_Dialog_content\"\n                hasCancel={false} //panel does not offer a \"close\" button\n            >\n                {alertMessage}\n                <div className=\"mx_Dialog_content\" id=\"mx_Dialog_content\">\n                    {descriptionMessage}\n                </div>\n                <DialogButtons\n                    primaryButton={okButtonText}\n                    hasCancel={false} //panel does not offer a \"cancel\" button\n                    onPrimaryButtonClick={this.onOk}\n                >\n                    {requestNewEmailButton}\n                </DialogButtons>\n            </BaseDialog>\n        );\n    }\n}\n","import { HttpApiEvent } from \"matrix-js-sdk/src/matrix\";\nimport defaultDispatcher, { MatrixDispatcher } from \"~tchap-web/src/dispatcher/dispatcher\";\nimport { ActionPayload } from \"~tchap-web/src/dispatcher/payloads\";\nimport { stopMatrixClient } from \"~tchap-web/src/Lifecycle\";\nimport { MatrixClientPeg } from \"~tchap-web/src/MatrixClientPeg\";\nimport Modal from \"~tchap-web/src/Modal\";\nimport PlatformPeg from \"~tchap-web/src/PlatformPeg\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\n\nimport ExpiredAccountDialog from \"../components/views/dialogs/ExpiredAccountDialog\";\nimport TchapUtils from \"../util/TchapUtils\";\n\n/*\n * Listens for HttpApiEvent.ORG_MATRIX_EXPIRED_ACCOUNT events and opens the panel ExpiredAccountDialog.\n * This component is required when activating the plugin synapse-email-account-validity on the server side:  https://github.com/matrix-org/synapse-email-account-validity\n * The class is instantiated in the default export, thus it is created only once at the first import.\n */\nclass ExpiredAccountHandler {\n    private boundOnExpiredAccountEvent: any; //the listener function;\n    private dispatcher: MatrixDispatcher;\n    private isPanelOpen: boolean;\n    private isAccountExpired: boolean;\n\n    constructor() {\n        this.boundOnExpiredAccountEvent = this.onExpiredAccountError.bind(this);\n        this.dispatcher = defaultDispatcher;\n        this.isPanelOpen = false;\n        this.isAccountExpired = false;\n    }\n\n    /**\n     * Register to listen to expired account event.\n     * Registration is done after the Matrix Client has been initialized but before it is started.\n     */\n    public register() {\n        const expiredRegistrationId = this.dispatcher.register((payload: ActionPayload) => {\n            if (payload.action === \"will_start_client\") {\n                logger.debug(\":tchap: register a listener for HttpApiEvent.ORG_MATRIX_EXPIRED_ACCOUNT events\");\n                // safeGet will throw if client is not initialised yet. We don't handle it because we don't know when it would happen.\n                const cli = MatrixClientPeg.safeGet();\n                cli.on(HttpApiEvent.ORG_MATRIX_EXPIRED_ACCOUNT, this.boundOnExpiredAccountEvent);\n                //unregister callback once the work is done\n                this.dispatcher.unregister(expiredRegistrationId);\n            }\n        });\n    }\n\n    /**\n     * When account expired account happens, display the panel if not open yet.\n     */\n    private onExpiredAccountError() {\n        logger.debug(\":tchap: Expired Account Error received\");\n\n        if (this.isPanelOpen) {\n            return;\n        }\n        //shutdown all matrix react services, but without unsetting the client\n        stopMatrixClient(false);\n        logger.debug(\":tchap: matrix react services have been shutdown\");\n\n        //should we sent the email directly? Normally they should have received already an email 7 days earlier\n        this.showExpirationPanel();\n        this.isPanelOpen = true;\n    }\n\n    private async showExpirationPanel() {\n        Modal.createDialog(\n            ExpiredAccountDialog,\n            { /* props */\n                onRequestNewEmail: () => {\n                    return TchapUtils.requestNewExpiredAccountEmail();\n                },\n                //check that the account is not expired when finishing\n                onFinished: async () => {\n                    this.isPanelOpen = false;\n                    PlatformPeg.get().reload();\n                },\n                //todo: define which static/dynamic settings are needed for this dialog\n            },\n            undefined /* className */,\n            false /* isPriorityModal */,\n            true /* isStaticModal */,\n            { /* options */\n                //close panel only if account is not expired\n                onBeforeClose: async () => {\n                    //verify that the account is not expired anymore\n                    this.isAccountExpired = await TchapUtils.isAccountExpired();\n                    return Promise.resolve(!this.isAccountExpired);\n                },\n            },\n        );\n    }\n}\n\nexport default new ExpiredAccountHandler();\n","import defaultDispatcher from \"~tchap-web/src/dispatcher/dispatcher\";\nimport { ActionPayload } from \"~tchap-web/src/dispatcher/payloads\";\nimport PlatformPeg from \"~tchap-web/src/PlatformPeg\";\n\nimport TchapVersionManagement from \"../util/TchapVersionManagement\";\nimport TchapUserSettings from \"../util/TchapUserSettings\";\nimport TchapUIFeature from \"../util/TchapUIFeature\";\nimport ExpiredAccountHandler from \"../lib/ExpiredAccountHandler\";\n/**\n * @deprecated\n * Determine weither the app needs a clearCacheAndReload after loading. We do it when upgrading from v2 to v4, to avoid weird keys bugs.\n * @returns Promise(true) if a refresh is needed, Promise(false) in other cases\n */\nexport async function needsRefreshForVersion4(): Promise<boolean> {\n    //check if the feature is activated\n    if (!TchapUIFeature.activateClearCacheAndReloadAtVersion4) {\n        return false;\n    }\n\n    let indexedDB;\n    try {\n        indexedDB = window.indexedDB;\n    } catch (e) {}\n\n    if (!indexedDB) {\n        //not sure why it could happen, do not refresh in this case (safety first, avoid creating an infinite clearCacheAndReload loop !)\n        return false;\n    }\n\n    // Read version of tchap app in localstorage\n    // if it is strictly less to version 4.x.y, do refresh\n    if (TchapVersionManagement.getAppVersion()) {\n        const previousAppVersion: string = TchapVersionManagement.getAppVersion();\n        const previousAppMajorVersion: number = parseInt(previousAppVersion.charAt(0), 10);\n        return !isNaN(previousAppMajorVersion) && previousAppMajorVersion < 4;\n    }\n\n    // If there is no tchap app version, it could be that this is a first install of tchap, or that saving the version has failed in the past, or\n    // that the previous install of tchap was before v4. We only want to refresh when we are upgrading v2->v4.\n    try {\n        // Read version of matrix-js-sdk:riot-web-sync, if it is lower than version 4, refresh is needed.\n        // Note : version 4 of the store happens to coincide with tchap-web v4, but it's unrelated.\n        const previousStoreVersion: number = await TchapVersionManagement.getStoreVersion(\n            indexedDB,\n            TchapVersionManagement.SYNC_STORE_NAME,\n        );\n        return previousStoreVersion < 4;\n    } catch (error) {\n        // Do not refresh (safety first, avoid creating an infinite clearCacheAndReload loop !)\n        console.warn(error);\n        return false;\n    }\n}\n\n/**\n * Force refresh after the client has started\n */\nexport function queueClearCacheAndReload() {\n    const clearCacheAndReloadId = defaultDispatcher.register((payload: ActionPayload) => {\n        if (payload.action === \"client_started\") {\n            //unregister callback once the work is done\n            defaultDispatcher.unregister(clearCacheAndReloadId);\n            //:tchap: use localstorage instead of matric idDB ?\n            TchapVersionManagement.clearCacheAndReload();\n        }\n    });\n}\n\n/**\n * Save app version to localstorage after the client has started\n */\nexport function queueOverideUserSettings() {\n    const saveVersionId = defaultDispatcher.register((payload: ActionPayload) => {\n        if (payload.action === \"client_started\") {\n            //override user settings\n            TchapUserSettings.override();\n\n            //unregister callback once the work is done\n            defaultDispatcher.unregister(saveVersionId);\n        }\n    });\n}\n\nexport function saveAppVersionInLocalStorage() {\n    //:tchap: keep initialising so that we can show any possible error with as many features (theme, i18n) as possible\n    TchapVersionManagement.saveAppVersion(PlatformPeg.get());\n    //end\n}\n\nexport function registerExpiredAccountListener() {\n    ExpiredAccountHandler.register();\n}\n\nexport default {\n    registerExpiredAccountListener,\n    saveAppVersionInLocalStorage,\n    queueOverideUserSettings,\n    queueClearCacheAndReload,\n    needsRefreshForVersion4\n}"],"names":["TchapVersionManagement","clearCacheAndReload","console","log","PlatformPeg","get","MatrixClientPeg","stopClient","store","deleteAllData","then","window","location","reload","getStoreVersion","indexedDB","dbName","Promise","resolve","reject","exists","req","open","onupgradeneeded","onblocked","error","onsuccess","db","result","version","close","deleteDatabase","onerror","ev","saveAppVersion","platform","localStorage","getAppVersion","setItem","VERSION_APP_KEY","getItem","_defineProperty","TchapUserSettings","override","ProcessState","ExpiredAccountDialog","React","constructor","props","super","async","this","state","ACCOUNT_RENEWED","onFinished","TchapUtils","isAccountExpired","setState","ACCOUNT_STILL_EXPIRED","mustWait","EMAIL_MUST_WAIT","SENDING_EMAIL","onRequestNewEmail","success","newEmailSentTimestamp","Date","now","EMAIL_SUCCESS","EMAIL_FAILURE","emailDelaySecs","START","render","titleMessage","_t","descriptionMessage","alertMessage","requestNewEmailButton","onClick","onRequestEmail","okButtonText","InlineSpinner","className","wait","BaseDialog","title","contentId","hasCancel","id","DialogButtons","primaryButton","onPrimaryButtonClick","onOk","boundOnExpiredAccountEvent","onExpiredAccountError","bind","dispatcher","defaultDispatcher","isPanelOpen","register","expiredRegistrationId","payload","action","logger","debug","safeGet","on","HttpApiEvent","ORG_MATRIX_EXPIRED_ACCOUNT","unregister","stopMatrixClient","showExpirationPanel","Modal","createDialog","requestNewExpiredAccountEmail","undefined","onBeforeClose","needsRefreshForVersion4","TchapUIFeature","activateClearCacheAndReloadAtVersion4","e","previousAppVersion","previousAppMajorVersion","parseInt","charAt","isNaN","SYNC_STORE_NAME","warn","queueClearCacheAndReload","clearCacheAndReloadId","queueOverideUserSettings","saveVersionId","saveAppVersionInLocalStorage","registerExpiredAccountListener","ExpiredAccountHandler"],"sourceRoot":""}