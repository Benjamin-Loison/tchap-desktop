name: "test-on-build"

on: [pull_request]

# This workflow will build your tauri app without uploading it anywhere.

jobs:
  test-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install SQLCipher for Windows
        if: matrix.platform == 'windows-latest'
        run: |
          # Install SQLCipher using vcpkg (will automatically install OpenSSL as a dependency)
          git clone https://github.com/microsoft/vcpkg
          cd vcpkg
          .\bootstrap-vcpkg.bat
          
          # Install SQLCipher with its dependencies (including OpenSSL)
          .\vcpkg.exe install sqlcipher:x64-windows
          
          # Integrate vcpkg with the build system
          .\vcpkg.exe integrate install
          
          # Set environment variables for the build
          echo "VCPKG_ROOT=$PWD" >> $env:GITHUB_ENV
          echo "SQLCIPHER_USE_VCPKG=1" >> $env:GITHUB_ENV
          echo "VCPKGRS_DYNAMIC=1" >> $env:GITHUB_ENV
          
          # List installed packages to verify
          .\vcpkg.exe list
          
          # Return to the original directory
          cd ..

      - name: install frontend dependencies
        run: |
          npm install
          npm run fetch-package

      # If tagName and releaseId are omitted tauri-action will only build the app and won't try to upload any assets.
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}