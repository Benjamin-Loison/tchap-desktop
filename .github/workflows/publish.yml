name: "publish"

on:
    push:
        tags:
            - "tchap-*"

# `tauri-action` can also upload app bundles to an existing GitHub release.
# This workflow uses different actions to create and publish the release.
# `tauri-action` will only build and upload the app bundles to the specified release.

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./src-tauri/tauri.conf.json').version")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Tchap Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install tchap as a desktop app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install SQLCipher for Windows
        if: matrix.platform == 'windows-latest'
        shell: cmd
        run: |
          if exist vcpkg rmdir /s /q vcpkg
          git clone https://github.com/microsoft/vcpkg
          cd vcpkg
          call .\bootstrap-vcpkg.bat -disableMetrics
          call .\vcpkg.exe install sqlcipher:x64-windows-static --clean-after-build
          call .\vcpkg.exe install sqlcipher:x64-windows --clean-after-build
          call .\vcpkg.exe integrate install
          echo VCPKG_ROOT=%CD%>>%GITHUB_ENV%
          echo "SQLCIPHER_USE_VCPKG=1">>%GITHUB_ENV%
          echo "VCPKGRS_DYNAMIC=1">>%GITHUB_ENV%
          echo VCPKG_DEFAULT_TRIPLET=x64-windows>>%GITHUB_ENV%
          echo "VCPKG_INSTALLED_DIR=%CD%\installed">>%GITHUB_ENV%
          echo "LIBCLANG_PATH=%CD%\installed\x64-windows\tools\libclang">>%GITHUB_ENV%
          echo "SQLCIPHER_LIB_DIR=%CD%\installed\x64-windows\lib">>%GITHUB_ENV%
          echo "SQLCIPHER_INCLUDE_DIR=%CD%\installed\x64-windows\include">>%GITHUB_ENV%
          dir installed\x64-windows\lib
          dir installed\x64-windows-static\lib
          .\vcpkg.exe list
          cd ..
          xcopy /y vcpkg\installed\x64-windows\bin\sqlcipher.dll .\src-tauri\
          xcopy /y vcpkg\installed\x64-windows\bin\libcrypto-3-x64.dll .\src-tauri\
          xcopy /y vcpkg\installed\x64-windows\bin\libssl-3-x64.dll .\src-tauri\
          xcopy /y vcpkg\installed\x64-windows\lib\sqlcipher.lib .\src-tauri\
          echo Listing copied files in src-tauri:
          dir .\src-tauri\
          echo Current directory contents:
          dir

      # Add step to determine Node.js version
      - name: Determine Node.js version
        id: nodever
        run: |
          NODE_VERSION="lts/*"
          
          if [ -f "package.json" ]; then
            if [ "$(jq -r '.tchapConfig["tchap-web_github"].use_github // false' package.json)" = "true" ]; then
              NODE_VERSION="20.9.0"
            fi
          fi

          
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nodever.outputs.NODE_VERSION }}

      # Add step to check package.json configuration
      - name: Check build type
        id: build-type
        shell: bash
        run: |
          if [ "$(jq -r '.tchapConfig["tchap-web_github"].use_github // false' package.json)" = "true" ]; then
            echo "BUILD_TYPE=github" >> $GITHUB_OUTPUT
          else
            echo "BUILD_TYPE=package" >> $GITHUB_OUTPUT
          fi


      # Install dependencies based on build type
      # the fetch package when using github is not done correctly, so doing it manually in the CI
      - name: Install dependencies (Package)
        if: steps.build-type.outputs.BUILD_TYPE == 'package'
        run: |
          npm install
          npm run fetch-package


      - name: Install dependencies (GitHub)
        if: steps.build-type.outputs.BUILD_TYPE == 'github'
        shell: bash
        run: |
          REPO=$(jq -r '.tchapConfig["tchap-web_github"].repo' package.json)
          BRANCH=$(jq -r '.tchapConfig["tchap-web_github"].branch' package.json)
          ENV=$(jq -r '.tchapConfig["tchap-web_github"].env' package.json)
          
          echo "Cloning $REPO branch $BRANCH..."
          git clone --depth 1 --branch $BRANCH $REPO archives/$BRANCH
          
          cd archives/$BRANCH
          echo "Installing dependencies..."
          yarn install --frozen-lockfile
          ./scripts/tchap/apply_patches.sh
          
          echo "Copying config..."
          if [ "$ENV" = "prod" ]; then
            cp config.prod.json config.json || cp config.sample.json config.json
          else
            cp config.dev.json config.json || cp config.sample.json config.json
          fi
          
          echo "Building..."
          yarn build
          
          cd ../..
          echo "Copying build output..."
          mkdir -p src
          cp -r archives/$BRANCH/webapp/* src/


      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}
          includeDebug: true

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })