## Normally the script fetch-package should install the deps etc but it is not working on the CI :/
name: Build Webapp

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string

jobs:
  build-webapp:
    runs-on: ${{ inputs.platform }}

    outputs:
      build_success: ${{ steps.build-result.outputs.success }}

    steps:
      - uses: actions/checkout@v4

      # Add step to determine Node.js version
      - name: Determine Node.js version
        id: nodever
        run: |
          NODE_VERSION="lts/*"
          if [ -f "package.json" ]; then
            if [ "$(jq -r '.tchapConfig["tchap-web_github"].use_github // false' package.json)" = "true" ]; then
              NODE_VERSION="20.10.0"
            fi
          fi
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nodever.outputs.NODE_VERSION }}

      # Add step to check package.json configuration
      - name: Check build type
        id: build-type
        shell: bash
        run: |
          if [ "$(jq -r '.tchapConfig["tchap-web_github"].use_github // false' package.json)" = "true" ]; then
            echo "BUILD_TYPE=github" >> $GITHUB_OUTPUT
          else
            echo "BUILD_TYPE=package" >> $GITHUB_OUTPUT
          fi

      # Install dependencies based on build type
      # the fetch package when using github is not done correctly, so doing it manually in the CI
      - name: Install dependencies (Package)
        if: steps.build-type.outputs.BUILD_TYPE == 'package'
        run: |
          npm install
          npm run fetch-package


      - name: Install dependencies (GitHub)
        if: steps.build-type.outputs.BUILD_TYPE == 'github'
        shell: bash
        run: |
          REPO=$(jq -r '.tchapConfig["tchap-web_github"].repo' package.json)
          BRANCH=$(jq -r '.tchapConfig["tchap-web_github"].branch' package.json)
          ENV=$(jq -r '.tchapConfig["tchap-web_github"].env' package.json)
          
          echo "Cloning $REPO branch $BRANCH..."
          git clone --depth 1 --branch $BRANCH $REPO archives/$BRANCH
          
          cd archives/$BRANCH
          echo "Installing dependencies..."
          yarn install --frozen-lockfile

          # apply patches to the tchap webapp manually because postinstall doesnt seems to work
          ./scripts/tchap/apply_patches.sh
          
          echo "Copying config..."
          if [ "$ENV" = "prod" ]; then
            cp config.prod.json config.json || cp config.sample.json config.json
          else
            cp config.dev.json config.json || cp config.sample.json config.json
          fi
          
          echo "Building..."
          yarn build
          
          cd ../..
          echo "Copying build output..."
          mkdir -p src
          cp -r archives/$BRANCH/webapp/* src/

      # To share the result of the build with another workflow, we need to upload the webapp as an artifact
      - name: Upload webapp as artifact
        uses: actions/upload-artifact@v4
        continue-on-error: true # Means that another platform already uploaded the artifact, so we don't need to fail the build
        with:
          name: webapp_${{ github.run_id }}
          path: src/